use mavenmovies; 

-- Basic Aggregate Functions: 

/*1. Retrieve the total number of rentals made in the Sakila database. 
Hint: Use the COUNT() function. */

select count(rental_id) from rental;

/*2. Find the average rental duration (in days) of movies rented from the Sakila database.
Hint: Utilize the AVG() function. */

select avg( rental_duration) from film;

-- String Functions:  

/*3. Display the first name and last name of customers in uppercase. 
Hint: Use the UPPER () function */

Select upper(first_name) as first_name, upper(last_name) as last_name from customer;

/*4. Extract the month from the rental date and display it alongside the rental ID. 
Hint: Employ the MONTH() function. */

select rental_id, month(rental_date) from rental;

-- GROUP BY:

/*5. Retrieve the count of rentals for each customer (display customer ID and the count of rentals). 
Hint: Use COUNT () in conjunction with GROUP BY. */

select customer_id, count(rental_id) from rental group by customer_id;

/*6. Find the total revenue generated by each store. 
Hint: Combine SUM() and GROUP BY. */

select st.store_id, sum(p.amount) as total_revenue from payment p
inner join staff sf
on sf.staff_id=p.staff_id
inner join store st
on st.store_id=sf.store_id
group by store_id;

-- Joins:

/*7. Display the title of the movie, customer s first name, and last name who rented it. 
Hint: Use JOIN between the film, inventory, rental, and customer tables*/

select f.title, c.first_name, c.last_name  from film f
inner join inventory i
on f.film_id=i.film_id
inner join rental r
on r.inventory_id=i.inventory_id
inner join customer c
on c.customer_id=r.customer_id;

/*8. Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 
Hint: Use JOIN between the film actor, film, and actor tables. */

select a.first_name, a.last_name from actor a
inner join film_actor fa
on a.actor_id=fa.actor_id
inner join film f
on f.film_id=fa.film_id
where f.title='Gone with the Wind';

-- GROUP BY: 

/*1. Determine the total number of rentals for each category of movies. 
Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY. */

select category_id, count(rental_id) as total_rental from film_category
inner join film 
on film.film_id=film_category.film_id
inner join inventory
on inventory.film_id=film.film_id
inner join rental
on rental.inventory_id=inventory.inventory_id
group by category_id;

/*2. Find the average rental rate of movies in each language. 
Hint: JOIN film and language tables, then use AVG () and GROUP BY. */

select name, avg(rental_rate) from language
inner join film
on language.language_id=film.language_id
group by name;

-- Joins:

/*3. Retrieve the customer names along with the total amount they've spent on rentals. 
Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY. */

select first_name, last_name, sum(amount) from customer
inner join payment
on customer.customer_id=payment.customer_id
inner join rental
on rental.rental_id=payment.rental_id
group by customer.customer_id;

/*4. List the titles of movies rented by each customer in a particular city (e.g., 'London'). 
Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY. */

select f.title, cu.customer_id, c.city from film f
inner join inventory iv 
on f.film_id=iv.film_id
inner join rental r
on r.inventory_id=iv.inventory_id
inner join customer cu
on cu.customer_id=r.customer_id
inner join address a
on a.address_id=cu.address_id
inner join city c
on c.city_id=a.city_id
group by cu.customer_id, f.title;
  
/*5. Display the top 5 rented movies along with the number of times they've been rented. 
Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results. */

select f.title, count(r.rental_id) as rented_times  from film f
inner join inventory iv
on iv.film_id=f.film_id
inner join rental r
on r.inventory_id=iv.inventory_id
group by f.title
limit 5;

/*6. Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 
Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY. */

select c.customer_id, concat(c.first_name,' ',c.last_name) as name, s.store_id from customer c
inner join rental r
on r.customer_id=c.customer_id
inner join inventory iv
on iv.inventory_id=r.inventory_id
inner join store s
on s.store_id=iv.store_id
where s.store_id in (1,2)
group by c.customer_id, s.store_id, name
having count(distinct s.store_id);
